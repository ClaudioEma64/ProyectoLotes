import cv2
import numpy as np
import matplotlib.pyplot as plt

#

#azul = (255, 0 ,0); verde = (0, 255, 0); rojo = (0, 0, 255)
dibujando = False #True si el boton esta presionado   
#modo= True #si true, rectangulo, sino linea, cambia con m
ix, iy = -1, -1

fx, fy = -1, -1

# Definir el color que quieres detectar (en formato BGR, no RGB)
color_a_detectar = (0, 255, 0)



# 1. Cargar imagen y convertir a escala de grises
img = cv2.imread('images.jpeg')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

img_temp= img.copy()

if img is None:
    print("Error: No se pudo cargar la imagen. Verifica la ruta.")
    exit()



# 2. Detectar bordes (Canny) el gradiente maximo de canny es 150
edges = cv2.Canny(gray, 130, 150, apertureSize=3)

# 3. Aplicar Transformada de Hough para líneas
#rho=1  Resolución de distancia en píxeles (precisión para detectar líneas).#
lines = cv2.HoughLines(edges, 1, np.pi/180, threshold=100)

# 4. Dibujar las líneas detectadas
if lines is not None:
    for rho, theta in lines[:, 0]:
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(img_temp, (x1, y1), (x2, y2), (0, 255, 0), 1)
# 5. Mostrar resultados
   
    plt.figure(figsize=(18, 6))
    
    plt.subplot(1,3, 1)
    plt.imshow(cv2.cvtColor(gray, cv2.COLOR_BGR2RGB))
    plt.title('Imagen Original')
    plt.axis('off')
    
    plt.subplot(1, 3, 2)
    plt.imshow(edges, cmap='gray')
    plt.title(f'Canny')
    plt.axis('off')
   

    plt.subplot(1, 3, 3)
    plt.imshow(img_temp, cmap='gray')
    plt.title(f'lineas detectadas')
    plt.axis('off')
   
    plt.tight_layout()
    plt.show()

#Funcion llamada Por CallbackMause()
def dibujar_Area_Lote(event, x , y, flags, param):
    global ix, iy, fx, fy, dibujando, img, img_temp
    if event == cv2.EVENT_LBUTTONDOWN:
        dibujando = True
        ix, iy = x, y
        fx, fy = x, y
#necesito recorre pixel por pixel hasta llegar a las lineas
# detectadas por Hough y cambiar el color de cada pixel         

# Recorrer la imagen píxel por píxel
        for iy in range(img_temp.shape[0]):  # Recorre filas (altura)
            for ix in range(img_temp.shape[1]):  # Recorre columnas (ancho)
            # Obtener el color del píxel actual (B, G, R)
                pixel_actual = img_temp[y, x]
        
            # Cambiar el color del píxel (ejemplo: lo ponemos rojo)
                img_temp[y, x] = (0, 0, 255)  # B=0, G=0, R=255 → Rojo
        
            # Verificar si el píxel original coincide con el color buscado
                if np.array_equal(pixel_actual, color_a_detectar):
                    print(f"¡Color detectado en posición (x={x}, y={y})!")
                    break  # Salir del bucle interno si se detecta
            else:
                continue  # Continuar si no se rompió el bucle interno
            break  # Salir del bucle externo si se detectó el color





#creo ventana con nombre image
cv2.namedWindow('image')
cv2.setMouseCallback('image', dibujar_Area_Lote)

print("Instrucciones:")
print("1. Seleccione un area que desea dibujar con el mouse")
print("2. Presione 'g' para guadar la seleccion")
print("3. Presione 'r' para restaurar la imagen original")
print("4. Presione 'q' para salir")




while(1):
    cv2.imshow("image", img_temp)
    k = cv2.waitKey(1) & 0xFF
    if k == ord('g'):  #guardar el area del lote
        if ix != -1 and iy != -1 and fx != -1 and fy != -1:
        #Asegurarse de que las coordenadas esten en el orden correcto
        #la funcion sorted() ordena un alista.            
            x1, x2 = sorted([ix, fx])
            y1, y2 = sorted([iy, fy])

            porcion = img[y1:y2, x1: x2].copy()
            cv2.imwrite('porcion_guardada.jpg', porcion)
            print("Porcion guardada como 'porcion_guardada.jpg'")

    elif  k == ord('r'): #Restuarar imagen original
        img_temp = img.copy()
        ix, iy = -1, -1
        fx, fy = -1, -1 
        print("Imagen restaurada - puede hacer una nueva seleccion")

    elif  k == ord('q'): #salir
        break

cv2.destroyAllWindows()
